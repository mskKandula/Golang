// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: arithmatic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperationserviceClient is the client API for Operationservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationserviceClient interface {
	PerformOperation(ctx context.Context, opts ...grpc.CallOption) (Operationservice_PerformOperationClient, error)
}

type operationserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationserviceClient(cc grpc.ClientConnInterface) OperationserviceClient {
	return &operationserviceClient{cc}
}

func (c *operationserviceClient) PerformOperation(ctx context.Context, opts ...grpc.CallOption) (Operationservice_PerformOperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Operationservice_ServiceDesc.Streams[0], "/arithmatic.Operationservice/PerformOperation", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationservicePerformOperationClient{stream}
	return x, nil
}

type Operationservice_PerformOperationClient interface {
	Send(*OperationRequest) error
	Recv() (*OperationResponse, error)
	grpc.ClientStream
}

type operationservicePerformOperationClient struct {
	grpc.ClientStream
}

func (x *operationservicePerformOperationClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationservicePerformOperationClient) Recv() (*OperationResponse, error) {
	m := new(OperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperationserviceServer is the server API for Operationservice service.
// All implementations must embed UnimplementedOperationserviceServer
// for forward compatibility
type OperationserviceServer interface {
	PerformOperation(Operationservice_PerformOperationServer) error
	mustEmbedUnimplementedOperationserviceServer()
}

// UnimplementedOperationserviceServer must be embedded to have forward compatible implementations.
type UnimplementedOperationserviceServer struct {
}

func (UnimplementedOperationserviceServer) PerformOperation(Operationservice_PerformOperationServer) error {
	return status.Errorf(codes.Unimplemented, "method PerformOperation not implemented")
}
func (UnimplementedOperationserviceServer) mustEmbedUnimplementedOperationserviceServer() {}

// UnsafeOperationserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationserviceServer will
// result in compilation errors.
type UnsafeOperationserviceServer interface {
	mustEmbedUnimplementedOperationserviceServer()
}

func RegisterOperationserviceServer(s grpc.ServiceRegistrar, srv OperationserviceServer) {
	s.RegisterService(&Operationservice_ServiceDesc, srv)
}

func _Operationservice_PerformOperation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationserviceServer).PerformOperation(&operationservicePerformOperationServer{stream})
}

type Operationservice_PerformOperationServer interface {
	Send(*OperationResponse) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type operationservicePerformOperationServer struct {
	grpc.ServerStream
}

func (x *operationservicePerformOperationServer) Send(m *OperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationservicePerformOperationServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Operationservice_ServiceDesc is the grpc.ServiceDesc for Operationservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Operationservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arithmatic.Operationservice",
	HandlerType: (*OperationserviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerformOperation",
			Handler:       _Operationservice_PerformOperation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "arithmatic.proto",
}
